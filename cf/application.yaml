AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VPC:
    Type: "AWS::EC2::VPC::Id"

  Subnets:
    Type: "List<AWS::EC2::Subnet::Id>"

  ServiceName:
    Type: String
    AllowedPattern: "[a-z0-9]+"

  ECRRepositoryName:
    Type: String

  DockerImageTag:
    Type: String
    Default: latest

  DesiredCount:
    Type: Number    
    Default: 0

Resources:
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Ref ServiceName
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP 80
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !Ref VPC

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /WeatherForecast
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 4
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId: !Ref VPC

  ECSExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      MaxSessionDuration: 3600
      Path: /service-role/
      Policies:
        - PolicyName: "GetSecrets"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref DatabaseConnectionStringSecret

  FargateCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Ref ServiceName

  FargateService:
    Type: "AWS::ECS::Service"
    DependsOn: Listener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref FargateCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: application
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: FargateSecurityGroup
          Subnets: !Ref Subnets
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition

  FargateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: HTTP 80
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
          ToPort: 80          
      VpcId: !Ref VPC

  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Cpu: "1024"
          Essential: true
          Image: !Join
            - ""
            - - Ref: "AWS::AccountId"
              - .dkr.ecr.
              - Ref: "AWS::Region"
              - .amazonaws.com/
              - !Ref ECRRepositoryName
              - ":"
              - !Ref DockerImageTag
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref TaskLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs
          Memory: "2048"
          MemoryReservation: "2048"
          Name: application
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          Secrets:
            - Name: ASPNETCORE_ConnectionStrings__main
              ValueFrom: !Ref DatabaseConnectionStringSecret
      Cpu: "1024"
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      Family: !Ref ServiceName
      Memory: "2048"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  TaskLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - /ecs/
          - !Ref ServiceName
      RetentionInDays: 7

  DatabaseSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: 'Secret for RDS instance'
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  DatabaseConnectionStringSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Join ['', ['Server=', !GetAtt Database.Endpoint.Address, ';Database=tempdb;User Id=', '{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}', ";Password='", '{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}', "'" ]]
    
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.small
      Engine: sqlserver-web
      EngineVersion: 14.00.3223.3.v1
      LicenseModel: license-included
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DatabaseSecret, ':SecretString:password}}' ]]
      BackupRetentionPeriod: 0
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
        - !Ref DatabaseSG

  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: db subnet group
      SubnetIds: !Ref Subnets

  DatabaseSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: SQLServer
      SecurityGroupIngress:
        - FromPort: 1433
          IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt FargateSecurityGroup.GroupId
          ToPort: 1433
      VpcId: !Ref VPC

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DatabaseSecret
      TargetId: !Ref Database
      TargetType: AWS::RDS::DBInstance

Outputs:
  LoadBalancer:
    Value: !GetAtt LoadBalancer.DNSName
