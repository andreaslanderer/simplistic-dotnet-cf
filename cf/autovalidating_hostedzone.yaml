AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Domain:
    Type: String

Resources:

  # Activating CloudTrail is always a good thing. But here CloudTrail is needed to trigger a Lambda function after creating new ACM certificates (RequestCertificate API call) via Events Rule.
  Trail:
    Type: "AWS::CloudTrail::Trail"
    Properties:
      CloudWatchLogsLogGroupArn: !GetAtt TrailLogs.Arn
      CloudWatchLogsRoleArn: !GetAtt TrailLogsRole.Arn
      IsLogging: True
      S3BucketName: !Ref TrailBucket
    DependsOn:
      - TrailBucketPolicy

  TrailBucket:
    Type: "AWS::S3::Bucket"

  TrailBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Sid": "AWSCloudTrailAclCheck20150319",
                    "Effect": "Allow",
                    "Principal": {"Service": "cloudtrail.amazonaws.com"},
                    "Action": "s3:GetBucketAcl",
                    "Resource": "arn:aws:s3:::${TrailBucket}"
                },
                {
                    "Sid": "AWSCloudTrailWrite20150319",
                    "Effect": "Allow",
                    "Principal": {"Service": "cloudtrail.amazonaws.com"},
                    "Action": "s3:PutObject",
                    "Resource": "arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*",
                    "Condition": {"StringEquals": {"s3:x-amz-acl": "bucket-owner-full-control"}}
                }
            ]
        }

  TrailLogs:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - ""
        - - /CloudTrail/
          - !Ref AWS::StackName
      RetentionInDays: 7

  TrailLogsRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
            Action:
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: "CloudWatchLogs" 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: 
                  - !GetAtt TrailLogs.Arn

  # We will use a Route53 HostedZone to provide our own CNAMEs for the ALB endpoints. In addition, our Lambda function will automatically enter the entries for validation of ACM certificates.
  # After the Hosted Zone is created, and before you create ACM certificates, you have to update your domain registrar's configuration entries (see: stack outputs)
  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Ref Domain

  ValidationTriggerRule:
    Type: "AWS::Events::Rule"
    Properties: 
      EventPattern:
        source:
          - "aws.acm"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - "acm.amazonaws.com"
          eventName:
            - "RequestCertificate"
      Targets: 
        - Arn: !GetAtt ValidationLambda.Arn
          Id: ValidationLambda

  # Create validation records in Route53 for newly requested ACM certificates
  ValidationLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Environment:
        Variables: 
          hostedZoneId: !Ref HostedZone
      Handler: index.handler
      Role: !GetAtt ValidationLambdaRole.Arn
      Runtime: nodejs12.x
      Timeout: 5
      Code:
        ZipFile: |
            var AWS = require('aws-sdk');
            var acm = new AWS.ACM();
            var route53 = new AWS.Route53();
            
            exports.handler = async (event) => {
                console.log(JSON.stringify(event));
                
                var certArn = event.detail.responseElements.certificateArn
                var cert = await acm.describeCertificate({
                  CertificateArn: certArn
                }).promise();
                
                console.log(JSON.stringify(cert));
                
                var dnsName = cert.Certificate.DomainValidationOptions[0].ResourceRecord.Name;
                var dnsValue = cert.Certificate.DomainValidationOptions[0].ResourceRecord.Value;
                var dnsType = cert.Certificate.DomainValidationOptions[0].ResourceRecord.Type;
                await route53.changeResourceRecordSets({
                  ChangeBatch: {
                    Changes: [
                      {
                        Action: "UPSERT",
                        ResourceRecordSet: {
                          Name: dnsName,
                          ResourceRecords: [
                            {
                              Value: dnsValue
                            }
                          ],
                          TTL: 60,
                          Type: dnsType
                        }
                      }
                    ],
                    Comment: "Automated cert validation"
                  },
                  HostedZoneId: process.env.hostedZoneId
                }).promise();
                
                return "done";
            };

  ValidationLambdaRole: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: "LogsRoute53AndACM" 
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "acm:DescribeCertificate"
                  - "route53:ChangeResourceRecordSets"
                Resource: #FIXME least privilege
                  - "*"

  LambdaInvokePermission: 
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref ValidationLambda
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ValidationTriggerRule.Arn

Outputs:
  Domain:
    Value: !Ref Domain
    Export:
      Name: Domain

  HostedZoneId:
    Value: !Ref HostedZone
    Export:
      Name: HostedZoneId

  NameServers:
    Value: !Join [ ",", !GetAtt HostedZone.NameServers ]
